{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encryptTransform = void 0;\n\nvar Aes = __importStar(require(\"crypto-js/aes\"));\n\nvar CryptoJsCore = __importStar(require(\"crypto-js/core\"));\n\nvar json_stringify_safe_1 = __importDefault(require(\"json-stringify-safe\"));\n\nvar redux_persist_1 = require(\"redux-persist\");\n\nvar makeError = function (message) {\n  return new Error(\"redux-persist-transform-encrypt: \" + message);\n};\n\nexports.encryptTransform = function (config) {\n  if (typeof config === 'undefined') {\n    throw makeError('No configuration provided.');\n  }\n\n  var secretKey = config.secretKey;\n\n  if (!secretKey) {\n    throw makeError('No secret key provided.');\n  }\n\n  var onError = typeof config.onError === 'function' ? config.onError : console.warn;\n  return redux_persist_1.createTransform(function (inboundState, _key) {\n    return Aes.encrypt(json_stringify_safe_1.default(inboundState), secretKey).toString();\n  }, function (outboundState, _key) {\n    if (typeof outboundState !== 'string') {\n      return onError(makeError('Expected outbound state to be a string.'));\n    }\n\n    try {\n      var decryptedString = Aes.decrypt(outboundState, secretKey).toString(CryptoJsCore.enc.Utf8);\n\n      if (!decryptedString) {\n        throw new Error('Decrypted string is empty.');\n      }\n\n      try {\n        return JSON.parse(decryptedString);\n      } catch (_a) {\n        return onError(makeError('Failed to parse state as JSON.'));\n      }\n    } catch (_b) {\n      return onError(makeError('Could not decrypt state. Please verify that you are using the correct secret key.'));\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}