{"ast":null,"code":"/* eslint-disable no-useless-escape */\n// DOCS: https://javascript.info/cookie\nexport class CookieComponent {\n  /**\r\n   * Returns the cookie with the given name, or undefined if not found\r\n   *\r\n   * @param  {string} name - cookie name\r\n   * @returns string | null\r\n   */\n  static get(name) {\n    let matches = document.cookie.match(new RegExp('(?:^|; )' + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + '=([^;]*)'));\n    return matches ? decodeURIComponent(matches[1]) : undefined;\n  }\n  /**\r\n   * Please note that a cookie value is encoded,\r\n   * so getCookie uses a built-in decodeURIComponent function to decode it.\r\n   *\r\n   * @param  {string} name - cookie name\r\n   * @param  {string | number | boolean} value - cookie value\r\n   * @param  {any} cookieOptions - cookie options\r\n   * @returns void\r\n   */\n\n\n  static set(name, value, cookieOptions) {\n    const options = {\n      path: '/',\n      // add other defaults here if necessary\n      ...cookieOptions\n    };\n\n    if (options.expires instanceof Date) {\n      options.expires = options.expires.toUTCString();\n    }\n\n    let updatedCookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n\n    for (let optionKey in options) {\n      updatedCookie += '; ' + optionKey;\n      let optionValue = options[optionKey];\n\n      if (optionValue !== true) {\n        updatedCookie += '=' + optionValue;\n      }\n    }\n\n    document.cookie = updatedCookie;\n  }\n  /**\r\n   * To delete a cookie, we can call it with a negative expiration date\r\n   *\r\n   * @param  {string} name\r\n   */\n\n\n  static delete(name) {\n    CookieComponent.set(name, '', {\n      'max-age': -1\n    });\n  }\n\n}","map":{"version":3,"names":["CookieComponent","get","name","matches","document","cookie","match","RegExp","replace","decodeURIComponent","undefined","set","value","cookieOptions","options","path","expires","Date","toUTCString","updatedCookie","encodeURIComponent","optionKey","optionValue","delete"],"sources":["V:/Projects/FDHC TSD/CCHND-React/Frontend/src/_metronic/assets/ts/components/_CookieComponent.ts"],"sourcesContent":["/* eslint-disable no-useless-escape */\r\n// DOCS: https://javascript.info/cookie\r\nexport class CookieComponent {\r\n  /**\r\n   * Returns the cookie with the given name, or undefined if not found\r\n   *\r\n   * @param  {string} name - cookie name\r\n   * @returns string | null\r\n   */\r\n  public static get(name: string): string | undefined {\r\n    let matches = document.cookie.match(\r\n      new RegExp('(?:^|; )' + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + '=([^;]*)')\r\n    )\r\n    return matches ? decodeURIComponent(matches[1]) : undefined\r\n  }\r\n\r\n  /**\r\n   * Please note that a cookie value is encoded,\r\n   * so getCookie uses a built-in decodeURIComponent function to decode it.\r\n   *\r\n   * @param  {string} name - cookie name\r\n   * @param  {string | number | boolean} value - cookie value\r\n   * @param  {any} cookieOptions - cookie options\r\n   * @returns void\r\n   */\r\n  public static set(name: string, value: string | number | boolean, cookieOptions: any): void {\r\n    const options = {\r\n      path: '/',\r\n      // add other defaults here if necessary\r\n      ...cookieOptions,\r\n    }\r\n\r\n    if (options.expires instanceof Date) {\r\n      options.expires = options.expires.toUTCString()\r\n    }\r\n\r\n    let updatedCookie = encodeURIComponent(name) + '=' + encodeURIComponent(value)\r\n\r\n    for (let optionKey in options) {\r\n      updatedCookie += '; ' + optionKey\r\n      let optionValue = options[optionKey]\r\n      if (optionValue !== true) {\r\n        updatedCookie += '=' + optionValue\r\n      }\r\n    }\r\n\r\n    document.cookie = updatedCookie\r\n  }\r\n\r\n  /**\r\n   * To delete a cookie, we can call it with a negative expiration date\r\n   *\r\n   * @param  {string} name\r\n   */\r\n  public static delete(name: string): void {\r\n    CookieComponent.set(name, '', {\r\n      'max-age': -1,\r\n    })\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA,OAAO,MAAMA,eAAN,CAAsB;EAC3B;AACF;AACA;AACA;AACA;AACA;EACmB,OAAHC,GAAG,CAACC,IAAD,EAAmC;IAClD,IAAIC,OAAO,GAAGC,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CACZ,IAAIC,MAAJ,CAAW,aAAaL,IAAI,CAACM,OAAL,CAAa,8BAAb,EAA6C,MAA7C,CAAb,GAAoE,UAA/E,CADY,CAAd;IAGA,OAAOL,OAAO,GAAGM,kBAAkB,CAACN,OAAO,CAAC,CAAD,CAAR,CAArB,GAAoCO,SAAlD;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACmB,OAAHC,GAAG,CAACT,IAAD,EAAeU,KAAf,EAAiDC,aAAjD,EAA2E;IAC1F,MAAMC,OAAO,GAAG;MACdC,IAAI,EAAE,GADQ;MAEd;MACA,GAAGF;IAHW,CAAhB;;IAMA,IAAIC,OAAO,CAACE,OAAR,YAA2BC,IAA/B,EAAqC;MACnCH,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACE,OAAR,CAAgBE,WAAhB,EAAlB;IACD;;IAED,IAAIC,aAAa,GAAGC,kBAAkB,CAAClB,IAAD,CAAlB,GAA2B,GAA3B,GAAiCkB,kBAAkB,CAACR,KAAD,CAAvE;;IAEA,KAAK,IAAIS,SAAT,IAAsBP,OAAtB,EAA+B;MAC7BK,aAAa,IAAI,OAAOE,SAAxB;MACA,IAAIC,WAAW,GAAGR,OAAO,CAACO,SAAD,CAAzB;;MACA,IAAIC,WAAW,KAAK,IAApB,EAA0B;QACxBH,aAAa,IAAI,MAAMG,WAAvB;MACD;IACF;;IAEDlB,QAAQ,CAACC,MAAT,GAAkBc,aAAlB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACsB,OAANI,MAAM,CAACrB,IAAD,EAAqB;IACvCF,eAAe,CAACW,GAAhB,CAAoBT,IAApB,EAA0B,EAA1B,EAA8B;MAC5B,WAAW,CAAC;IADgB,CAA9B;EAGD;;AAxD0B"},"metadata":{},"sourceType":"module"}