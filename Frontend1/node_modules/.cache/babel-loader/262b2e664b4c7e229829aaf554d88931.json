{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n\nimport * as React from 'react';\nimport { noTextChildNodes, possibleStandardNames, randomString, styleToObject } from './helpers';\n\nfunction parseAttributes(node, reactKey) {\n  var attributes = {\n    key: reactKey\n  };\n  /* istanbul ignore else */\n\n  if (node instanceof Element) {\n    var nodeClassNames = node.getAttribute('class');\n\n    if (nodeClassNames) {\n      attributes.className = nodeClassNames;\n    }\n\n    __spreadArray([], __read(node.attributes), false).forEach(function (d) {\n      switch (d.name) {\n        // this is manually handled above, so break;\n        case 'class':\n          break;\n\n        case 'style':\n          attributes[d.name] = styleToObject(d.value);\n          break;\n\n        case 'allowfullscreen':\n        case 'allowpaymentrequest':\n        case 'async':\n        case 'autofocus':\n        case 'autoplay':\n        case 'checked':\n        case 'controls':\n        case 'default':\n        case 'defer':\n        case 'disabled':\n        case 'formnovalidate':\n        case 'hidden':\n        case 'ismap':\n        case 'itemscope':\n        case 'loop':\n        case 'multiple':\n        case 'muted':\n        case 'nomodule':\n        case 'novalidate':\n        case 'open':\n        case 'readonly':\n        case 'required':\n        case 'reversed':\n        case 'selected':\n        case 'typemustmatch':\n          attributes[possibleStandardNames[d.name] || d.name] = true;\n          break;\n\n        default:\n          attributes[possibleStandardNames[d.name] || d.name] = d.value;\n      }\n    });\n  }\n\n  return attributes;\n}\n\nfunction parseChildren(childNodeList, level, options) {\n  var children = __spreadArray([], __read(childNodeList), false).map(function (node, index) {\n    return convertFromNode(node, __assign(__assign({}, options), {\n      index: index,\n      level: level + 1\n    }));\n  }).filter(Boolean);\n\n  if (!children.length) {\n    return null;\n  }\n\n  return children;\n}\n\nfunction parseName(nodeName) {\n  if (/[a-z]+[A-Z]+[a-z]+/.test(nodeName)) {\n    return nodeName;\n  }\n\n  return nodeName.toLowerCase();\n}\n\nexport function convertFromNode(input, options) {\n  var _a;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!input || !(input instanceof Node)) {\n    return null;\n  }\n\n  var _b = options.actions,\n      actions = _b === void 0 ? [] : _b,\n      _c = options.index,\n      index = _c === void 0 ? 0 : _c,\n      _d = options.level,\n      level = _d === void 0 ? 0 : _d,\n      randomKey = options.randomKey;\n  var node = input;\n  var key = \"\".concat(level, \"-\").concat(index);\n  var result = [];\n\n  if (randomKey && level === 0) {\n    key = \"\".concat(randomString(), \"-\").concat(key);\n  }\n  /* istanbul ignore else */\n\n\n  if (Array.isArray(actions)) {\n    actions.forEach(function (action) {\n      if (action.condition(node, key, level)) {\n        if (typeof action.pre === 'function') {\n          node = action.pre(node, key, level);\n\n          if (!(node instanceof Node)) {\n            node = input;\n            /* istanbul ignore else */\n\n            if (process.env.NODE_ENV !== 'production') {\n              // eslint-disable-next-line no-console\n              console.warn('The `pre` method always must return a valid DomNode (instanceof Node) - your modification will be ignored (Hint: if you want to render a React-component, use the `post` method instead)');\n            }\n          }\n        }\n\n        if (typeof action.post === 'function') {\n          result.push(action.post(node, key, level));\n        }\n      }\n    });\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  switch (node.nodeType) {\n    case 1:\n      {\n        // regular dom-node\n        return React.createElement(parseName(node.nodeName), parseAttributes(node, key), parseChildren(node.childNodes, level, options));\n      }\n\n    case 3:\n      {\n        // textnode\n        var nodeText = ((_a = node.nodeValue) === null || _a === void 0 ? void 0 : _a.toString()) || '';\n        /* istanbul ignore else */\n\n        if (/^\\s+$/.test(nodeText) && !/[\\u00A0\\u202F]/.test(nodeText)) {\n          return null;\n        }\n        /* istanbul ignore next */\n\n\n        if (!node.parentNode) {\n          return nodeText;\n        }\n\n        var parentNodeName = node.parentNode.nodeName.toLowerCase();\n\n        if (noTextChildNodes.includes(parentNodeName)) {\n          /* istanbul ignore else */\n          if (/\\S/.test(nodeText)) {\n            // eslint-disable-next-line no-console\n            console.warn(\"A textNode is not allowed inside '\".concat(parentNodeName, \"'. Your text \\\"\").concat(nodeText, \"\\\" will be ignored\"));\n          }\n\n          return null;\n        }\n\n        return nodeText;\n      }\n\n    case 8:\n      {\n        // html-comment\n        return null;\n      }\n\n    /* istanbul ignore next */\n\n    default:\n      {\n        return null;\n      }\n  }\n}\nexport function convertFromString(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!input || typeof input !== 'string') {\n    return null;\n  }\n\n  var _a = options.nodeOnly,\n      nodeOnly = _a === void 0 ? false : _a,\n      _b = options.selector,\n      selector = _b === void 0 ? 'body > *' : _b,\n      _c = options.type,\n      type = _c === void 0 ? 'text/html' : _c;\n\n  try {\n    var parser = new DOMParser();\n    var document_1 = parser.parseFromString(input, type);\n    var node = document_1.querySelector(selector);\n\n    if (!(node instanceof Node)) {\n      throw new TypeError('Error parsing input');\n    }\n\n    if (nodeOnly) {\n      return node;\n    }\n\n    return convertFromNode(node, options);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n  }\n\n  return null;\n}\nexport default function convert(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof input === 'string') {\n    return convertFromString(input, options);\n  }\n\n  if (input instanceof Node) {\n    return convertFromNode(input, options);\n  }\n\n  return null;\n} //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module"}