{"ast":null,"code":"import { canUseDOM as canUseDOMFlag } from 'exenv';\nexport var STATUS = {\n  FAILED: 'failed',\n  LOADED: 'loaded',\n  LOADING: 'loading',\n  PENDING: 'pending',\n  READY: 'ready',\n  UNSUPPORTED: 'unsupported'\n};\nexport function canUseDOM() {\n  return canUseDOMFlag;\n}\nexport function isSupportedEnvironment() {\n  return supportsInlineSVG() && typeof window !== 'undefined' && window !== null;\n}\nexport function supportsInlineSVG() {\n  /* istanbul ignore next */\n  if (!document) {\n    return false;\n  }\n\n  var div = document.createElement('div');\n  div.innerHTML = '<svg />';\n  return !!div.firstChild && div.firstChild.namespaceURI === 'http://www.w3.org/2000/svg';\n}\nexport function randomString(length) {\n  var letters = 'abcdefghijklmnopqrstuvwxyz';\n  var numbers = '1234567890';\n  var charset = \"\" + letters + letters.toUpperCase() + numbers;\n\n  var randomCharacter = function (character) {\n    return character[Math.floor(Math.random() * character.length)];\n  };\n\n  var R = '';\n\n  for (var i = 0; i < length; i++) {\n    R += randomCharacter(charset);\n  }\n\n  return R;\n}\n/**\n *  Remove properties from an object\n */\n\nexport function removeProperties(input) {\n  var filter = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    filter[_i - 1] = arguments[_i];\n  }\n\n  var output = {};\n\n  for (var key in input) {\n    /* istanbul ignore else */\n    if ({}.hasOwnProperty.call(input, key)) {\n      if (!filter.includes(key)) {\n        output[key] = input[key];\n      }\n    }\n  }\n\n  return output;\n} //# sourceMappingURL=helpers.js.map","map":null,"metadata":{},"sourceType":"module"}