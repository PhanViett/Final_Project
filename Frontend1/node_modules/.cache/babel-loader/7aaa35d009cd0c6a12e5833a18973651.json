{"ast":null,"code":"/* eslint-disable array-callback-return */\n\n/* eslint-disable no-useless-escape */\nimport { DataUtil } from '../_utils/index';\nconst defaultPasswordMeterOptions = {\n  minLength: 8,\n  checkUppercase: true,\n  checkLowercase: true,\n  checkDigit: true,\n  checkChar: true,\n  scoreHighlightClass: 'active'\n};\nconst defaultPasswordMeterQueires = {\n  componentName: 'password-meter',\n  instanseQuery: '[data-kt-password-meter]',\n  inputQuery: 'input[type]',\n  visibilityQuery: '[data-kt-password-meter-control=\"visibility\"]',\n  highlightQuery: '[data-kt-password-meter-control=\"highlight\"]'\n};\n\nclass PasswordMeterComponent {\n  constructor(_element, _options, _queries) {\n    this.element = void 0;\n    this.inputElement = void 0;\n    this.visibilityElement = void 0;\n    this.highlightElement = void 0;\n    this.options = void 0;\n    this.queries = void 0;\n    this.score = void 0;\n    this.checkSteps = void 0;\n\n    this.reset = () => {\n      this.score = 0;\n      this.highlight();\n    };\n\n    this.element = _element;\n    this.options = Object.assign(defaultPasswordMeterOptions, _options);\n    this.queries = _queries;\n    this.score = 0;\n    this.checkSteps = 5; // Elements\n\n    this.inputElement = this.element.querySelector(this.queries.inputQuery);\n    this.visibilityElement = this.element.querySelector(this.queries.visibilityQuery);\n    this.highlightElement = this.element.querySelector(this.queries.highlightQuery); // Event Handlers\n\n    this.handlers();\n    DataUtil.set(this.element, this.queries.componentName, this);\n  }\n\n  handlers() {\n    if (this.inputElement) {\n      this.inputElement.addEventListener('input', () => {\n        this.check();\n      });\n    }\n\n    if (this.visibilityElement) {\n      this.visibilityElement.addEventListener('click', () => {\n        this.visitbility();\n      });\n    }\n  }\n\n  visitbility() {\n    if (this.visibilityElement && this.inputElement) {\n      const visibleIcon = this.visibilityElement.querySelector('i:not(.d-none), .svg-icon:not(.d-none)');\n      const hiddenIcon = this.visibilityElement.querySelector('i.d-none, .svg-icon.d-none');\n      const typeAttr = this.inputElement.getAttribute('type') || '';\n\n      if (typeAttr === 'password') {\n        this.inputElement.setAttribute('type', 'text');\n      } else {\n        this.inputElement.setAttribute('type', 'password');\n      }\n\n      visibleIcon === null || visibleIcon === void 0 ? void 0 : visibleIcon.classList.add('d-none');\n      hiddenIcon === null || hiddenIcon === void 0 ? void 0 : hiddenIcon.classList.remove('d-none');\n      this.inputElement.focus();\n    }\n  }\n\n  checkScore() {\n    return 0;\n  }\n\n  checkLength() {\n    if (this.inputElement) {\n      return this.inputElement.value.length >= this.options.minLength; // 20 score\n    }\n\n    return false;\n  }\n\n  checkLowerCase() {\n    const val = this.inputElement ? this.inputElement.value : '';\n    return /[a-z]/.test(val); // 20 score\n  }\n\n  checkUppercase() {\n    const val = this.inputElement ? this.inputElement.value : '';\n    return /[A-Z]/.test(val); // 20 score\n  }\n\n  checkDigit() {\n    const val = this.inputElement ? this.inputElement.value : '';\n    return /[0-9]/.test(val); // 20 score\n  }\n\n  checkChar() {\n    const val = this.inputElement ? this.inputElement.value : '';\n    return /[~`!#$%\\^&*+=\\-\\[\\]\\\\';,/{}|\\\\\":<>\\?]/g.test(val); // 20 score\n  }\n\n  getCheckScore() {\n    let count = 1;\n\n    if (this.options.checkUppercase) {\n      count++;\n    }\n\n    if (this.options.checkLowercase) {\n      count++;\n    }\n\n    if (this.options.checkDigit) {\n      count++;\n    }\n\n    if (this.options.checkChar) {\n      count++;\n    }\n\n    this.checkSteps = count;\n    return 100 / this.checkSteps;\n  }\n\n  highlight() {\n    const items = this.highlightElement ? [].slice.call(this.highlightElement.querySelectorAll('div')) : [];\n    const total = items.length;\n    let index = 0;\n    const checkScore = this.getCheckScore();\n    const score = this.getScore();\n    items.map(item => {\n      index++;\n\n      if (checkScore * index * (this.checkSteps / total) <= score) {\n        item.classList.add('active');\n      } else {\n        item.classList.remove('active');\n      }\n    });\n  } ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n\n  getScore() {\n    return this.score;\n  }\n\n  check() {\n    let score = 0;\n    const checkScore = this.getCheckScore();\n\n    if (this.checkLength()) {\n      score = score + checkScore;\n    }\n\n    if (this.options.checkUppercase && this.checkLowerCase()) {\n      score = score + checkScore;\n    }\n\n    if (this.options.checkLowercase && this.checkUppercase()) {\n      score = score + checkScore;\n    }\n\n    if (this.options.checkDigit && this.checkDigit()) {\n      score = score + checkScore;\n    }\n\n    if (this.options.checkChar && this.checkChar()) {\n      score = score + checkScore;\n    }\n\n    this.score = score;\n    this.highlight();\n  } // Static methods\n\n\n}\n\nPasswordMeterComponent.getInstance = function (el) {\n  let componentName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPasswordMeterQueires.componentName;\n  const passwordMeter = DataUtil.get(el, componentName);\n\n  if (passwordMeter) {\n    return passwordMeter;\n  }\n\n  return null;\n};\n\nPasswordMeterComponent.createInstances = function () {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPasswordMeterQueires.instanseQuery;\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPasswordMeterOptions;\n  let queries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultPasswordMeterQueires;\n  const elements = document.body.querySelectorAll(selector);\n  elements.forEach(el => {\n    const item = el;\n    let passwordMeter = PasswordMeterComponent.getInstance(item);\n\n    if (!passwordMeter) {\n      passwordMeter = new PasswordMeterComponent(item, options, queries);\n    }\n  });\n};\n\nPasswordMeterComponent.createInsance = function () {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPasswordMeterQueires.instanseQuery;\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPasswordMeterOptions;\n  let queries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultPasswordMeterQueires;\n  const element = document.body.querySelector(selector);\n\n  if (!element) {\n    return;\n  }\n\n  const item = element;\n  let passwordMeter = PasswordMeterComponent.getInstance(item);\n\n  if (!passwordMeter) {\n    passwordMeter = new PasswordMeterComponent(item, options, queries);\n  }\n\n  return passwordMeter;\n};\n\nPasswordMeterComponent.bootstrap = function () {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPasswordMeterQueires.instanseQuery;\n  PasswordMeterComponent.createInstances(selector);\n};\n\nPasswordMeterComponent.reinitialization = function () {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPasswordMeterQueires.instanseQuery;\n  PasswordMeterComponent.createInstances(selector);\n};\n\nexport { PasswordMeterComponent, defaultPasswordMeterOptions, defaultPasswordMeterQueires };","map":{"version":3,"names":["DataUtil","defaultPasswordMeterOptions","minLength","checkUppercase","checkLowercase","checkDigit","checkChar","scoreHighlightClass","defaultPasswordMeterQueires","componentName","instanseQuery","inputQuery","visibilityQuery","highlightQuery","PasswordMeterComponent","constructor","_element","_options","_queries","element","inputElement","visibilityElement","highlightElement","options","queries","score","checkSteps","reset","highlight","Object","assign","querySelector","handlers","set","addEventListener","check","visitbility","visibleIcon","hiddenIcon","typeAttr","getAttribute","setAttribute","classList","add","remove","focus","checkScore","checkLength","value","length","checkLowerCase","val","test","getCheckScore","count","items","slice","call","querySelectorAll","total","index","getScore","map","item","getInstance","el","passwordMeter","get","createInstances","selector","elements","document","body","forEach","createInsance","bootstrap","reinitialization"],"sources":["V:/Projects/FDHC TSD/CCHND-React/Frontend/src/_metronic/assets/ts/components/_PasswordMeterComponent.ts"],"sourcesContent":["/* eslint-disable array-callback-return */\r\n/* eslint-disable no-useless-escape */\r\nimport {DataUtil} from '../_utils/index'\r\n\r\nexport interface IPasswordMeterOptions {\r\n  minLength: number\r\n  checkUppercase: boolean\r\n  checkLowercase: boolean\r\n  checkDigit: boolean\r\n  checkChar: boolean\r\n  scoreHighlightClass: string\r\n}\r\n\r\nexport interface IPasswordMeterQueries {\r\n  componentName: string\r\n  instanseQuery: string\r\n  inputQuery: string\r\n  visibilityQuery: string\r\n  highlightQuery: string\r\n}\r\n\r\nconst defaultPasswordMeterOptions = {\r\n  minLength: 8,\r\n  checkUppercase: true,\r\n  checkLowercase: true,\r\n  checkDigit: true,\r\n  checkChar: true,\r\n  scoreHighlightClass: 'active',\r\n}\r\n\r\nconst defaultPasswordMeterQueires: IPasswordMeterQueries = {\r\n  componentName: 'password-meter',\r\n  instanseQuery: '[data-kt-password-meter]',\r\n  inputQuery: 'input[type]',\r\n  visibilityQuery: '[data-kt-password-meter-control=\"visibility\"]',\r\n  highlightQuery: '[data-kt-password-meter-control=\"highlight\"]',\r\n}\r\n\r\nclass PasswordMeterComponent {\r\n  element: HTMLElement\r\n  inputElement: HTMLInputElement | null\r\n  visibilityElement: HTMLElement | null\r\n  highlightElement: HTMLElement | null\r\n  options: IPasswordMeterOptions\r\n  queries: IPasswordMeterQueries\r\n  score: number\r\n  checkSteps: number\r\n\r\n  constructor(\r\n    _element: HTMLElement,\r\n    _options: IPasswordMeterOptions,\r\n    _queries: IPasswordMeterQueries\r\n  ) {\r\n    this.element = _element\r\n    this.options = Object.assign(defaultPasswordMeterOptions, _options)\r\n    this.queries = _queries\r\n    this.score = 0\r\n    this.checkSteps = 5\r\n\r\n    // Elements\r\n    this.inputElement = this.element.querySelector(this.queries.inputQuery)\r\n    this.visibilityElement = this.element.querySelector(this.queries.visibilityQuery)\r\n    this.highlightElement = this.element.querySelector(this.queries.highlightQuery)\r\n\r\n    // Event Handlers\r\n    this.handlers()\r\n\r\n    DataUtil.set(this.element, this.queries.componentName, this)\r\n  }\r\n\r\n  private handlers(): void {\r\n    if (this.inputElement) {\r\n      this.inputElement.addEventListener('input', () => {\r\n        this.check()\r\n      })\r\n    }\r\n\r\n    if (this.visibilityElement) {\r\n      this.visibilityElement.addEventListener('click', () => {\r\n        this.visitbility()\r\n      })\r\n    }\r\n  }\r\n\r\n  private visitbility() {\r\n    if (this.visibilityElement && this.inputElement) {\r\n      const visibleIcon = this.visibilityElement.querySelector(\r\n        'i:not(.d-none), .svg-icon:not(.d-none)'\r\n      )\r\n\r\n      const hiddenIcon = this.visibilityElement.querySelector('i.d-none, .svg-icon.d-none')\r\n\r\n      const typeAttr = this.inputElement.getAttribute('type') || ''\r\n\r\n      if (typeAttr === 'password') {\r\n        this.inputElement.setAttribute('type', 'text')\r\n      } else {\r\n        this.inputElement.setAttribute('type', 'password')\r\n      }\r\n\r\n      visibleIcon?.classList.add('d-none')\r\n      hiddenIcon?.classList.remove('d-none')\r\n\r\n      this.inputElement.focus()\r\n    }\r\n  }\r\n\r\n  private checkScore(): number {\r\n    return 0\r\n  }\r\n\r\n  private checkLength(): boolean {\r\n    if (this.inputElement) {\r\n      return this.inputElement.value.length >= this.options.minLength // 20 score\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  private checkLowerCase(): boolean {\r\n    const val = this.inputElement ? this.inputElement.value : ''\r\n    return /[a-z]/.test(val) // 20 score\r\n  }\r\n\r\n  private checkUppercase(): boolean {\r\n    const val = this.inputElement ? this.inputElement.value : ''\r\n    return /[A-Z]/.test(val) // 20 score\r\n  }\r\n\r\n  private checkDigit(): boolean {\r\n    const val = this.inputElement ? this.inputElement.value : ''\r\n    return /[0-9]/.test(val) // 20 score\r\n  }\r\n\r\n  private checkChar(): boolean {\r\n    const val = this.inputElement ? this.inputElement.value : ''\r\n    return /[~`!#$%\\^&*+=\\-\\[\\]\\\\';,/{}|\\\\\":<>\\?]/g.test(val) // 20 score\r\n  }\r\n\r\n  private getCheckScore(): number {\r\n    let count = 1\r\n    if (this.options.checkUppercase) {\r\n      count++\r\n    }\r\n\r\n    if (this.options.checkLowercase) {\r\n      count++\r\n    }\r\n\r\n    if (this.options.checkDigit) {\r\n      count++\r\n    }\r\n\r\n    if (this.options.checkChar) {\r\n      count++\r\n    }\r\n\r\n    this.checkSteps = count\r\n    return 100 / this.checkSteps\r\n  }\r\n\r\n  private highlight() {\r\n    const items = this.highlightElement\r\n      ? [].slice.call(this.highlightElement.querySelectorAll('div'))\r\n      : []\r\n    const total = items.length\r\n    let index = 0\r\n    const checkScore = this.getCheckScore()\r\n    const score = this.getScore()\r\n\r\n    items.map((item: HTMLElement) => {\r\n      index++\r\n      if (checkScore * index * (this.checkSteps / total) <= score) {\r\n        item.classList.add('active')\r\n      } else {\r\n        item.classList.remove('active')\r\n      }\r\n    })\r\n  }\r\n\r\n  ///////////////////////\r\n  // ** Public API  ** //\r\n  ///////////////////////\r\n  public reset = () => {\r\n    this.score = 0\r\n    this.highlight()\r\n  }\r\n\r\n  public getScore() {\r\n    return this.score\r\n  }\r\n\r\n  public check() {\r\n    let score = 0\r\n    const checkScore = this.getCheckScore()\r\n    if (this.checkLength()) {\r\n      score = score + checkScore\r\n    }\r\n\r\n    if (this.options.checkUppercase && this.checkLowerCase()) {\r\n      score = score + checkScore\r\n    }\r\n\r\n    if (this.options.checkLowercase && this.checkUppercase()) {\r\n      score = score + checkScore\r\n    }\r\n\r\n    if (this.options.checkDigit && this.checkDigit()) {\r\n      score = score + checkScore\r\n    }\r\n\r\n    if (this.options.checkChar && this.checkChar()) {\r\n      score = score + checkScore\r\n    }\r\n\r\n    this.score = score\r\n    this.highlight()\r\n  }\r\n\r\n  // Static methods\r\n  public static getInstance = (\r\n    el: HTMLElement,\r\n    componentName: string = defaultPasswordMeterQueires.componentName\r\n  ) => {\r\n    const passwordMeter = DataUtil.get(el, componentName)\r\n    if (passwordMeter) {\r\n      return passwordMeter\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  public static createInstances = (\r\n    selector: string = defaultPasswordMeterQueires.instanseQuery,\r\n    options: IPasswordMeterOptions = defaultPasswordMeterOptions,\r\n    queries: IPasswordMeterQueries = defaultPasswordMeterQueires\r\n  ) => {\r\n    const elements = document.body.querySelectorAll(selector)\r\n    elements.forEach((el) => {\r\n      const item = el as HTMLElement\r\n      let passwordMeter = PasswordMeterComponent.getInstance(item)\r\n      if (!passwordMeter) {\r\n        passwordMeter = new PasswordMeterComponent(item, options, queries)\r\n      }\r\n    })\r\n  }\r\n\r\n  public static createInsance = (\r\n    selector: string = defaultPasswordMeterQueires.instanseQuery,\r\n    options: IPasswordMeterOptions = defaultPasswordMeterOptions,\r\n    queries: IPasswordMeterQueries = defaultPasswordMeterQueires\r\n  ): PasswordMeterComponent | undefined => {\r\n    const element = document.body.querySelector(selector)\r\n    if (!element) {\r\n      return\r\n    }\r\n    const item = element as HTMLElement\r\n    let passwordMeter = PasswordMeterComponent.getInstance(item)\r\n    if (!passwordMeter) {\r\n      passwordMeter = new PasswordMeterComponent(item, options, queries)\r\n    }\r\n    return passwordMeter\r\n  }\r\n\r\n  public static bootstrap = (selector: string = defaultPasswordMeterQueires.instanseQuery) => {\r\n    PasswordMeterComponent.createInstances(selector)\r\n  }\r\n\r\n  public static reinitialization = (\r\n    selector: string = defaultPasswordMeterQueires.instanseQuery\r\n  ) => {\r\n    PasswordMeterComponent.createInstances(selector)\r\n  }\r\n}\r\nexport {PasswordMeterComponent, defaultPasswordMeterOptions, defaultPasswordMeterQueires}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}